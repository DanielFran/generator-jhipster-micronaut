package <%=packageName%>.config;

import java.net.URI;
import java.net.URISyntaxException;
import java.time.Duration;
import java.util.Properties;

import <%=packageName%>.util.JHipsterProperties;
import io.micronaut.context.ApplicationContext;
import io.micronaut.context.annotation.Factory;
import org.ehcache.config.builders.*;
import org.ehcache.jsr107.Eh107Configuration;

import org.ehcache.jsr107.EhcacheCachingProvider;

import javax.cache.CacheManager;
import javax.inject.Singleton;

@Factory
public class CacheConfiguration {

    private final javax.cache.configuration.Configuration<Object, Object> jcacheConfiguration;

    public CacheConfiguration(JHipsterProperties jHipsterProperties) {
       <%_ if (cacheProvider === 'ehcache') { _%>
        JHipsterProperties.Cache.Ehcache ehcache =
            jHipsterProperties.getCache().getEhcache();

        jcacheConfiguration = Eh107Configuration.fromEhcacheCacheConfiguration(
            CacheConfigurationBuilder.newCacheConfigurationBuilder(Object.class, Object.class,
                ResourcePoolsBuilder.heap(ehcache.getMaxEntries()))
                .withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofSeconds(ehcache.getTimeToLiveSeconds())))
                .build());
        <%_ } _%>

        // TODO add caffiene configuration
    }

    @Singleton
    public CacheManager cacheManager(ApplicationContext applicationContext) {
        CacheManager cacheManager = new EhcacheCachingProvider().getCacheManager(
            null, applicationContext.getClassLoader(), new Properties());
        customizeCacheManager(cacheManager);
        return cacheManager;
    }

    private void customizeCacheManager(CacheManager cm) {
        <%_ if (!skipUserManagement || (authenticationType === 'oauth2' && databaseType !== 'no')) { _%>
        createCache(cm, <%=packageName%>.repository.UserRepository.USERS_BY_LOGIN_CACHE);
        createCache(cm, <%=packageName%>.repository.UserRepository.USERS_BY_EMAIL_CACHE);
          <%_ if (enableHibernateCache) { _%>
        createCache(cm, <%=packageName%>.domain.User.class.getName());
        createCache(cm, <%=packageName%>.domain.Authority.class.getName());
        createCache(cm, <%=packageName%>.domain.User.class.getName() + ".authorities");
            <%_ if (authenticationType === 'session') { _%>
            <%_ } _%>
          <%_ } _%>
        <%_ } _%>
        <%_ if (cacheProvider === 'ehcache') { _%>
        // jhipster-needle-ehcache-add-entry
        <%_ } _%>
        <%_ if (cacheProvider === 'caffeine') { _%>
        // TODO not yet implemented
        // jhipster-needle-caffeine-add-entry
        <%_ } _%>
    }

    private void createCache(javax.cache.CacheManager cm, String cacheName) {
        javax.cache.Cache<Object, Object> cache = cm.getCache(cacheName);
        if (cache != null) {
            cm.destroyCache(cacheName);
        }
        cm.createCache(cacheName, jcacheConfiguration);
    }
}
